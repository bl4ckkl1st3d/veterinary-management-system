/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package contents;

import java.awt.Font;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.table.DefaultTableModel;
import swing.ScrollBar;

/**
 *
 * @author Richard Reynald
 */
public class Cashier_PointOfSale extends javax.swing.JPanel {

    private int realUserId;
    
    public Cashier_PointOfSale(int realUserId) {
        initComponents();
        this.realUserId = realUserId;
        sp.setHorizontalScrollBar(new ScrollBar());
        sp.setVerticalScrollBar(new ScrollBar());
        sp1.setHorizontalScrollBar(new ScrollBar());
        sp1.setVerticalScrollBar(new ScrollBar());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sp = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();
        sp1 = new javax.swing.JScrollPane();
        productTable = new javax.swing.JTable();
        removeBtn = new javax.swing.JButton();
        checkoutBtn = new javax.swing.JButton();
        addBtn = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        receiptTextArea = new javax.swing.JTextArea();
        txtBarcode = new swing.TextField();
        txtQuantity = new swing.TextField();
        customerNameTxtField = new swing.TextField();
        totalPriceTextField = new swing.TextField();

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        productTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Price", "Quantity", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        sp1.setViewportView(productTable);

        removeBtn.setText("Remove");
        removeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBtnActionPerformed(evt);
            }
        });

        checkoutBtn.setText("CHECKOUT");
        checkoutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkoutBtnActionPerformed(evt);
            }
        });

        addBtn.setText("Add");
        addBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBtnActionPerformed(evt);
            }
        });

        receiptTextArea.setColumns(20);
        receiptTextArea.setRows(5);
        receiptTextArea.setText("qwr");
        jScrollPane3.setViewportView(receiptTextArea);

        txtBarcode.setLabelText("Barcode");

        txtQuantity.setLabelText("Quantity");

        customerNameTxtField.setLabelText("Customer Name");

        totalPriceTextField.setLabelText("Total Price");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(300, 300, 300)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 349, Short.MAX_VALUE)
                .addGap(255, 255, 255))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(checkoutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(sp1)
                        .addGroup(jPanel5Layout.createSequentialGroup()
                            .addComponent(customerNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(totalPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel5Layout.createSequentialGroup()
                            .addComponent(txtBarcode, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGap(18, 18, 18)
                            .addComponent(txtQuantity, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGap(18, 18, 18)
                            .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(removeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(20, 20, 20))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtBarcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(removeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(15, 15, 15)
                .addComponent(sp1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(customerNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(totalPriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(checkoutBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(205, 205, 205)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 309, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(175, 175, 175))
        );

        sp.setViewportView(jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sp, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sp, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void removeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBtnActionPerformed
        // Get the selected row index
        int selectedRow = productTable.getSelectedRow();

        // Check if a row is selected
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, "No row selected.");
            return;
        }

        // Prompt the user for confirmation
        int confirm = JOptionPane.showConfirmDialog(this, "Do you want to remove the selected product from the cart?", "Confirm Remove", JOptionPane.YES_NO_OPTION);

        // If the user confirms, remove the row
        if (confirm == JOptionPane.YES_OPTION) {
            DefaultTableModel model = (DefaultTableModel) productTable.getModel();

            // Remove the selected row
            model.removeRow(selectedRow);

            // Update the total price text field
            double sumTotalPrice = 0;
            for (int i = 0; i < model.getRowCount(); i++) {
                sumTotalPrice += (double) model.getValueAt(i, 3);
            }
            totalPriceTextField.setText(String.format("%.2f", sumTotalPrice));
        }
    }//GEN-LAST:event_removeBtnActionPerformed

    private void checkoutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkoutBtnActionPerformed
        // Prompt user for payment amount
        String paymentStr = JOptionPane.showInputDialog(this, "Enter payment amount:");
        double paymentAmount;
        try {
            paymentAmount = Double.parseDouble(paymentStr);
            if (paymentAmount <= 0) {
                JOptionPane.showMessageDialog(this, "Invalid payment amount.");
                return;
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid payment amount.");
            return;
        }

        // Get total price from totalPriceTextField
        double totalPrice = Double.parseDouble(totalPriceTextField.getText());

        // Validate payment amount
        if (paymentAmount < totalPrice) {
            JOptionPane.showMessageDialog(this, "Payment amount is less than the total price.");
            return;
        }

        // Proceed with checkout process
        String cashierName = getCashierName(realUserId);
        if (cashierName == null) {
            JOptionPane.showMessageDialog(this, "Cashier not found.");
            return;
        }

        int receiptId = insertSalesReceipt(totalPrice, cashierName);
        if (receiptId == -1) {
            JOptionPane.showMessageDialog(this, "Error creating sales receipt.");
            return;
        }

        if (!insertSalesDetails(receiptId)) {
            JOptionPane.showMessageDialog(this, "Error adding sales details.");
            return;
        }

        // Display change to user
        double change = paymentAmount - totalPrice;
        JOptionPane.showMessageDialog(this, "Checkout successful! Change: " + String.format("%.2f", change));

        // Update receiptTextArea
        updateReceiptTextArea(receiptId, cashierName);

        // Generate receipt for printing or display
        //generateReceipt(receiptId, totalPrice, paymentAmount, cashierName, productTable, receiptTextArea);

        // Clear product table and reset total price
        DefaultTableModel model = (DefaultTableModel) productTable.getModel();
        model.setRowCount(0);
        totalPriceTextField.setText("0.00");
    }//GEN-LAST:event_checkoutBtnActionPerformed

    private void addBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBtnActionPerformed
        // Get the barcode from the barcode text field
        String barcode = txtBarcode.getText().trim();

        // Database connection details
        String url = "jdbc:mysql://127.0.0.1:3306/database";
        String dbUsername = "root";
        String dbPassword = "admin";

        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            // Establish a connection to the database
            conn = DriverManager.getConnection(url, dbUsername, dbPassword);

            // SQL query to fetch product information by barcode
            String sql = "SELECT name, price, stocks FROM product_information WHERE barcode = ?";

            // Prepare the statement
            pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, barcode);

            // Execute the query
            rs = pstmt.executeQuery();

            // Check if a match is found
            if (!rs.next()) {
                JOptionPane.showMessageDialog(this, "Invalid barcode.");
                return;
            }

            // Get the product details from the result set
            String name = rs.getString("name");
            double price = rs.getDouble("price");
            int stocks = rs.getInt("stocks");

            // Get the quantity from the quantity text field
            String quantityStr = txtQuantity.getText().trim();

            // Validate the quantity
            int quantity;
            try {
                quantity = Integer.parseInt(quantityStr);
                if (quantity <= 0) {
                    JOptionPane.showMessageDialog(this, "Quantity must be a positive number.");
                    return;
                }
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Quantity must be an integer.");
                return;
            }

            DefaultTableModel model = (DefaultTableModel) productTable.getModel();
            boolean productExists = false;
            int totalQuantity = quantity;

            // Search for the product in the table by barcode
            for (int i = 0; i < model.getRowCount(); i++) {
                if (model.getValueAt(i, 0).equals(name)) {
                    // Product found, update the total quantity
                    int existingQuantity = (int) model.getValueAt(i, 2);
                    totalQuantity += existingQuantity;

                    // Check if the total quantity exceeds the available stock
                    if (totalQuantity > stocks) {
                        JOptionPane.showMessageDialog(this, "Insufficient stock available.");
                        return;
                    }

                    // Update the quantity and total price
                    double newTotalPrice = price * totalQuantity;
                    model.setValueAt(totalQuantity, i, 2);
                    model.setValueAt(newTotalPrice, i, 3);
                    productExists = true;
                    break;
                }
            }

            if (!productExists) {
                // Check if the input quantity exceeds the available stock
                if (quantity > stocks) {
                    JOptionPane.showMessageDialog(this, "Insufficient stock available.");
                    return;
                }

                // Product not found, add a new row
                double totalPrice = price * quantity;
                model.addRow(new Object[]{name, price, quantity, totalPrice});
            }

            // Sum all the total price values in the table and display in totalPriceTextField
            double sumTotalPrice = 0;
            for (int i = 0; i < model.getRowCount(); i++) {
                sumTotalPrice += (double) model.getValueAt(i, 3);
            }

            // Update the total price text field
            totalPriceTextField.setText(String.format("%.2f", sumTotalPrice));

            // Clear the barcode and quantity fields
            txtBarcode.setText("");
            txtQuantity.setText("");

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_addBtnActionPerformed
    public void generateReceipt(int receiptId, double total, double pay, String cashierName, JTable table, JTextArea txtbill) {
    DefaultTableModel model = (DefaultTableModel) table.getModel();
    
    // Clear existing text in txtbill
    txtbill.setText("");
    
    // Header
    txtbill.append("******************************************************\n");
    txtbill.append("                Feetish Foot Store                   \n");
    txtbill.append("                 OFFICIAL RECEIPT                     \n");
    txtbill.setFont(txtbill.getFont().deriveFont(Font.BOLD, 13f));
    txtbill.append("******************************************************\n");

    // Cashier Name and Receipt ID
    txtbill.append(String.format("Cashier: %s\n", cashierName));
    txtbill.append(String.format("Receipt ID: %d\n", receiptId));
    txtbill.append("Product\t\tPrice\t\tQty\t\tAmount\n");

    // Iterate through each row in the table model to append product details
    for (int i = 0; i < model.getRowCount(); i++) {
        String productName = (String) model.getValueAt(i, 1);
        double price = (double) model.getValueAt(i, 2);
        int quantity = (int) model.getValueAt(i, 3);
        double amount = (double) model.getValueAt(i, 4);
        
        txtbill.append(String.format("%s\t\t%.2f\t\t%d x\t\t%.2f\n", productName, price, quantity, amount));
    }

    txtbill.append("******************************************************\n");

    // Total, Payment, and Change
    txtbill.append(String.format("\nSubtotal: %.2f\n", total));
    txtbill.append(String.format("Amount Paid: %.2f\n", pay));
    txtbill.append(String.format("Change: %.2f\n", (pay - total)));

    txtbill.append("******************************************************\n");
    txtbill.append("           THANK YOU, COME AGAIN             \n");
}


    private String getCashierName(int userId) {
        String cashierName = null;
        String url = "jdbc:mysql://127.0.0.1:3306/database";
        String dbUsername = "root";
        String dbPassword = "admin";
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            conn = DriverManager.getConnection(url, dbUsername, dbPassword);
            String cashierSql = "SELECT first_name, last_name FROM user_information WHERE userid = ?";
            pstmt = conn.prepareStatement(cashierSql);
            pstmt.setInt(1, userId);
            rs = pstmt.executeQuery();

            if (rs.next()) {
                String firstName = rs.getString("first_name");
                String lastName = rs.getString("last_name");
                cashierName = firstName + " " + lastName;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        return cashierName;
    }

    private int insertSalesReceipt(double totalPrice, String cashierName) {
        String url = "jdbc:mysql://127.0.0.1:3306/database";
        String dbUsername = "root";
        String dbPassword = "admin";
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        int receiptId = -1;

        try {
            conn = DriverManager.getConnection(url, dbUsername, dbPassword);
            String receiptSql = "INSERT INTO sales_receipts (transaction_date, total_amount, cashier_name) VALUES (NOW(), ?, ?)";
            pstmt = conn.prepareStatement(receiptSql, PreparedStatement.RETURN_GENERATED_KEYS);
            pstmt.setDouble(1, totalPrice);
            pstmt.setString(2, cashierName);
            pstmt.executeUpdate();

            rs = pstmt.getGeneratedKeys();
            if (rs.next()) {
                receiptId = rs.getInt(1);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        return receiptId;
    }

    private boolean insertSalesDetails(int receiptId) {
        DefaultTableModel model = (DefaultTableModel) productTable.getModel();
        String url = "jdbc:mysql://127.0.0.1:3306/database";
        String dbUsername = "root";
        String dbPassword = "admin";
        Connection conn = null;
        PreparedStatement pstmt = null;
        PreparedStatement updateStmt = null; // Separate PreparedStatement for stock update
        ResultSet rs = null;
        boolean success = true;

        try {
            conn = DriverManager.getConnection(url, dbUsername, dbPassword);
            String detailsSql = "INSERT INTO sales_details (receipt_id, product_id, product_name, quantity, price) VALUES (?, ?, ?, ?, ?)";
            String stockUpdateSql = "UPDATE product_information SET stocks = stocks - ? WHERE product_id = ?";
            pstmt = conn.prepareStatement(detailsSql);
            updateStmt = conn.prepareStatement(stockUpdateSql);

            for (int i = 0; i < model.getRowCount(); i++) {
                String productName = (String) model.getValueAt(i, 0);
                int quantity = (int) model.getValueAt(i, 2);
                double price = (double) model.getValueAt(i, 1);

                // Get product_id from product_information table
                String productIdSql = "SELECT product_id FROM product_information WHERE name = ?";
                PreparedStatement productIdStmt = conn.prepareStatement(productIdSql);
                productIdStmt.setString(1, productName);
                ResultSet rsProductId = productIdStmt.executeQuery();

                int productId = 0;
                if (rsProductId.next()) {
                    productId = rsProductId.getInt("product_id");
                }

                // Insert into sales_details table
                pstmt.setInt(1, receiptId);
                pstmt.setInt(2, productId);
                pstmt.setString(3, productName);
                pstmt.setInt(4, quantity);
                pstmt.setDouble(5, price);
                pstmt.executeUpdate();

                // Update product stocks
                updateStmt.setInt(1, quantity);
                updateStmt.setInt(2, productId);
                updateStmt.executeUpdate();

                // Close ResultSet and Statement for product_id query
                rsProductId.close();
                productIdStmt.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
            success = false;
        } finally {
            try {
                if (rs != null) {
                    rs.close();
                }
                if (pstmt != null) {
                    pstmt.close();
                }
                if (updateStmt != null) {
                    updateStmt.close();
                }
                if (conn != null) {
                    conn.close();
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }

        return success;
    }

    private void updateReceiptTextArea(int receiptId, String cashierName) {
        SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Date currentDate = new Date();

        StringBuilder receiptText = new StringBuilder();
        receiptText.append("===== Receipt =====\n");
        receiptText.append("Cashier: ").append(cashierName).append("\n");
        receiptText.append("Date: ").append(dateFormat.format(currentDate)).append("\n\n");

        DefaultTableModel model = (DefaultTableModel) productTable.getModel();
        receiptText.append(String.format("%-20s%-10s%-10s\n", "Product", "Quantity", "Total"));
        receiptText.append("------------------------------------------\n");

        double totalPrice = 0.0;
        for (int i = 0; i < model.getRowCount(); i++) {
            String productName = (String) model.getValueAt(i, 0);
            int quantity = (int) model.getValueAt(i, 2);
            double price = (double) model.getValueAt(i, 1);
            double total = quantity * price;

            receiptText.append(String.format("%-20s%-10d%-10.2f\n", productName, quantity, total));
            totalPrice += total;
        }

        receiptText.append("\n------------------------------------------\n");
        receiptText.append(String.format("%-30s%.2f\n", "Total:", totalPrice));
        receiptText.append("\nThank you for shopping with us!\n");

        receiptTextArea.setText(receiptText.toString());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addBtn;
    private javax.swing.JButton checkoutBtn;
    private swing.TextField customerNameTxtField;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable productTable;
    private javax.swing.JTextArea receiptTextArea;
    private javax.swing.JButton removeBtn;
    private javax.swing.JScrollPane sp;
    private javax.swing.JScrollPane sp1;
    private swing.TextField totalPriceTextField;
    private swing.TextField txtBarcode;
    private swing.TextField txtQuantity;
    // End of variables declaration//GEN-END:variables
}

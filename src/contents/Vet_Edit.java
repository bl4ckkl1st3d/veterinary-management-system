
package contents;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import swing.ScrollBar;

/**
 *
 * @author Richard Reynald
 */
public class Vet_Edit extends javax.swing.JPanel {

    private int realUserId;
    
    public Vet_Edit(int realUserId) {
        initComponents();
        this.realUserId = realUserId;
        sp.setVerticalScrollBar(new ScrollBar());
        sp.setHorizontalScrollBar(new ScrollBar());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sp = new javax.swing.JScrollPane();
        jPanel6 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        medicalHistoryTable = new javax.swing.JTable();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        vaccinationHistoryTable = new javax.swing.JTable();
        updateMedicalBtn = new javax.swing.JToggleButton();
        jLabel28 = new javax.swing.JLabel();
        vaccinationDate = new com.toedter.calendar.JDateChooser();
        jLabel30 = new javax.swing.JLabel();
        dueDate = new com.toedter.calendar.JDateChooser();
        updatePatientBtn = new javax.swing.JToggleButton();
        updateOwnerBtn = new javax.swing.JToggleButton();
        updateVaccineBtn = new javax.swing.JToggleButton();
        patientIdTxtField = new swing.TextField();
        patientTxtField = new swing.TextField();
        weightTxt = new swing.TextField();
        typeTxtField = new swing.TextField();
        breedTxtField = new swing.TextField();
        ageTxt = new swing.TextField();
        colorTxtField = new swing.TextField();
        marksTxtField = new swing.TextField();
        sexComboBox = new swing.Combobox();
        diagnosisTxtField = new swing.TextField();
        treatmentTxtField = new swing.TextField();
        medicationTxtField = new swing.TextField();
        vaccineNameTxtField = new swing.TextField();
        nameTxtField = new swing.TextField();
        addressTxtField = new swing.TextField();
        contactTxtField = new swing.TextField();

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));

        jLabel17.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("MEDICAL HISTORY");

        jLabel20.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel20.setText("OWNER INFORMATION");

        medicalHistoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(medicalHistoryTable);

        jLabel24.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel24.setText("PATIENT INFORMATION");

        jLabel25.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel25.setText("VACCINE HISTORY");

        vaccinationHistoryTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane4.setViewportView(vaccinationHistoryTable);

        updateMedicalBtn.setText("UPDATE MEDICAL HISTORY");
        updateMedicalBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateMedicalBtnActionPerformed(evt);
            }
        });

        jLabel28.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel28.setText("Vaccination Date");

        jLabel30.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel30.setText("Next Due");

        updatePatientBtn.setText("UPDATE PATIENT INFORMATION");
        updatePatientBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updatePatientBtnActionPerformed(evt);
            }
        });

        updateOwnerBtn.setText("UPDATE OWNER INFORMATION");
        updateOwnerBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateOwnerBtnActionPerformed(evt);
            }
        });

        updateVaccineBtn.setText("UPDATE VACCINE HISTORY");
        updateVaccineBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateVaccineBtnActionPerformed(evt);
            }
        });

        patientIdTxtField.setLabelText("Patient ID");
        patientIdTxtField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                patientIdTxtFieldKeyReleased(evt);
            }
        });

        patientTxtField.setLabelText("Patient Name");

        weightTxt.setLabelText("Weight");

        typeTxtField.setLabelText("Type");

        breedTxtField.setLabelText("Breed");

        ageTxt.setLabelText("Age");

        colorTxtField.setLabelText("Color");

        marksTxtField.setLabelText("Marks");

        sexComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Male", "Female" }));
        sexComboBox.setSelectedIndex(-1);
        sexComboBox.setLabelText("Sex");

        diagnosisTxtField.setLabelText("Diagnosis");

        treatmentTxtField.setLabelText("Treatment");

        medicationTxtField.setLabelText("Medication");

        vaccineNameTxtField.setLabelText("Vaccine Name");

        nameTxtField.setLabelText("Name");

        addressTxtField.setLabelText("Address");

        contactTxtField.setLabelText("Contact No.");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(137, 137, 137)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel30)
                            .addComponent(jLabel28)
                            .addComponent(jLabel25)
                            .addComponent(jLabel20)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 744, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(diagnosisTxtField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
                                .addComponent(treatmentTxtField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(medicationTxtField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 744, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(207, Short.MAX_VALUE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel17)
                            .addComponent(jLabel24)
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(updateMedicalBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel6Layout.createSequentialGroup()
                                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(breedTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(patientTxtField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(weightTxt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(typeTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGap(131, 131, 131)
                                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(updatePatientBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(patientIdTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(marksTxtField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(colorTxtField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(sexComboBox, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                                                .addComponent(ageTxt, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                                .addComponent(updateVaccineBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(updateOwnerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 319, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(vaccineNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, 500, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(dueDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                                    .addComponent(vaccinationDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(contactTxtField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
                                .addComponent(addressTxtField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(nameTxtField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(patientIdTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45)
                .addComponent(jLabel24, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ageTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(patientTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(weightTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(sexComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(typeTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(colorTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(25, 25, 25)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(breedTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(marksTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addComponent(updatePatientBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(100, 100, 100)
                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(38, 38, 38)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(76, 76, 76)
                .addComponent(diagnosisTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(treatmentTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(medicationTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(updateMedicalBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(96, 96, 96)
                .addComponent(jLabel25, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 354, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(103, 103, 103)
                .addComponent(vaccineNameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel28, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(vaccinationDate, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel30, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(dueDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(30, 30, 30)
                .addComponent(updateVaccineBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(85, 85, 85)
                .addComponent(jLabel20, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(nameTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addressTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(contactTxtField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(updateOwnerBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(83, 83, 83))
        );

        sp.setViewportView(jPanel6);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sp, javax.swing.GroupLayout.DEFAULT_SIZE, 1100, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sp, javax.swing.GroupLayout.DEFAULT_SIZE, 685, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void patientIdTxtFieldKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_patientIdTxtFieldKeyReleased
        searchPatient();
        updateMedicalHistoryTable();
        updateVaccineHistoryTable();
    }//GEN-LAST:event_patientIdTxtFieldKeyReleased

    private void updateVaccineBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateVaccineBtnActionPerformed
        updateVaccine();
        updateVaccineHistoryTable();
    }//GEN-LAST:event_updateVaccineBtnActionPerformed

    private void updateOwnerBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateOwnerBtnActionPerformed
        updateOwner();
    }//GEN-LAST:event_updateOwnerBtnActionPerformed

    private void updatePatientBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updatePatientBtnActionPerformed
        updatePatient();
    }//GEN-LAST:event_updatePatientBtnActionPerformed

    private void updateMedicalBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateMedicalBtnActionPerformed
        updateMedical();
        updateMedicalHistoryTable();
    }//GEN-LAST:event_updateMedicalBtnActionPerformed
    private void clearTextFields() {
        patientTxtField.setText("");
        ageTxt.setText("");
        weightTxt.setText("");
        typeTxtField.setText("");
        colorTxtField.setText("");
        breedTxtField.setText("");
        marksTxtField.setText("");
        sexComboBox.setSelectedIndex(-1);

        nameTxtField.setText("");
        addressTxtField.setText("");
        contactTxtField.setText("");
    }

    private void searchPatient() {
        String patientIdText = patientIdTxtField.getText();

        if (patientIdText.isEmpty()) {
            // Clear all text fields if the patient ID is empty
            clearTextFields();
            return;
        }

        int patientId = Integer.parseInt(patientIdText);

        String url = "jdbc:mysql://127.0.0.1:3306/database";
        String dbUsername = "root";
        String dbPassword = "admin";

        try {
            // Establish the database connection
            Connection connection = DriverManager.getConnection(url, dbUsername, dbPassword);

            // Retrieve patient information
            String patientQuery = "SELECT * FROM patient_information WHERE patient_id = ?";
            PreparedStatement patientStmt = connection.prepareStatement(patientQuery);
            patientStmt.setInt(1, patientId);
            ResultSet patientResultSet = patientStmt.executeQuery();

            if (patientResultSet.next()) {
                // Set the patient information to text fields
                patientTxtField.setText(patientResultSet.getString("patient_name"));
                ageTxt.setText(String.valueOf(patientResultSet.getInt("age")));
                weightTxt.setText(String.valueOf(patientResultSet.getFloat("weight")));
                typeTxtField.setText(patientResultSet.getString("type"));
                colorTxtField.setText(patientResultSet.getString("color"));
                breedTxtField.setText(patientResultSet.getString("breed"));
                marksTxtField.setText(patientResultSet.getString("marks"));
                sexComboBox.setSelectedItem(patientResultSet.getString("sex").equals("M") ? "MALE" : "FEMALE");

                String clientName = patientResultSet.getString("client_name");

                // Retrieve client information
                String clientQuery = "SELECT * FROM client_information WHERE client_name = ?";
                PreparedStatement clientStmt = connection.prepareStatement(clientQuery);
                clientStmt.setString(1, clientName);
                ResultSet clientResultSet = clientStmt.executeQuery();

                if (clientResultSet.next()) {
                    // Set the client information to text fields
                    nameTxtField.setText(clientResultSet.getString("client_name"));
                    addressTxtField.setText(clientResultSet.getString("address"));
                    contactTxtField.setText(clientResultSet.getString("contact"));
                }

                clientStmt.close();
                clientResultSet.close();
            } else {
                // If no patient found, clear all text fields
                clearTextFields();
            }

            patientStmt.close();
            patientResultSet.close();
            connection.close();
        } catch (SQLException e) {
            // Handle any SQL exceptions
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }
    }

    
        private void updateMedical() {
        // Get the necessary information from text fields
        String diagnosis = diagnosisTxtField.getText();
        String treatment = treatmentTxtField.getText();
        String medications = medicationTxtField.getText();
        int patientId = Integer.parseInt(patientIdTxtField.getText());
       
        String url = "jdbc:mysql://127.0.0.1:3306/database";
        String dbUsername = "root";
        String dbPassword = "admin";

        String doctorName = "";
         if(diagnosis.isEmpty()|| treatment.isEmpty() || medications.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Must complete all fields.");
        }
         else{
        try {
            // Establish the database connection
            Connection connection = DriverManager.getConnection(url, dbUsername, dbPassword);

            // Query to get the doctor's name from user_information table
            String userQuery = "SELECT first_name, last_name FROM user_information WHERE userid = ?";
            PreparedStatement userStatement = connection.prepareStatement(userQuery);
            userStatement.setInt(1, realUserId);

            ResultSet userResultSet = userStatement.executeQuery();

            if (userResultSet.next()) {
                String firstName = userResultSet.getString("first_name");
                String lastName = userResultSet.getString("last_name");
                doctorName = firstName + " " + lastName;
            } else {
                JOptionPane.showMessageDialog(null, "User information not found.");
                return;
            }

            // Query to insert the medical history information
            String medicalHistoryQuery = "INSERT INTO medical_history (patient_id, visit_date, diagnosis, treatment, medications, doctor_name) VALUES (?, CURDATE(), ?, ?, ?, ?)";
            PreparedStatement medicalStatement = connection.prepareStatement(medicalHistoryQuery);
            medicalStatement.setInt(1, patientId);
            medicalStatement.setString(2, diagnosis);
            medicalStatement.setString(3, treatment);
            medicalStatement.setString(4, medications);
            medicalStatement.setString(5, doctorName);

            int rowsAffected = medicalStatement.executeUpdate();

            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Medical history updated successfully.");
                
                diagnosisTxtField.setText("");
                treatmentTxtField.setText("");
                medicationTxtField.setText("");
            } else {
                JOptionPane.showMessageDialog(null, "Failed to update medical history.");
            }

            // Close the statements and the connection
            userStatement.close();
            medicalStatement.close();
            connection.close();
        } catch (SQLException e) {
            // Handle any SQL exceptions
            e.printStackTrace();
        }
    }}
    
    public void updateMedicalHistoryTable() {
        // Get the patient ID from the patientIdTxtField
        int patientId = Integer.parseInt(patientIdTxtField.getText());

        String url = "jdbc:mysql://127.0.0.1:3306/database";
        String dbUsername = "root";
        String dbPassword = "admin";

        try {
            // Establish the database connection
            Connection connection = DriverManager.getConnection(url, dbUsername, dbPassword);

            // Query to fetch medical history information for the specified patient ID
            String query = "SELECT diagnosis, treatment, medications, visit_date, doctor_name FROM medical_history WHERE patient_id = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(query);
            preparedStatement.setInt(1, patientId);
            ResultSet resultSet = preparedStatement.executeQuery();

            // Create a DefaultTableModel to hold the medical history data
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("Diagnosis");
            model.addColumn("Treatment");
            model.addColumn("Medication");
            model.addColumn("Visit Date");
            model.addColumn("Attending Doctor");
            // Populate the model with the retrieved data
            while (resultSet.next()) {
                String diagnosis = resultSet.getString("diagnosis");
                String treatment = resultSet.getString("treatment");
                String medications = resultSet.getString("medications");
                String visitDate = resultSet.getString("visit_date");
                String attendingDoctor = resultSet.getString("doctor_name");

                model.addRow(new Object[]{diagnosis, treatment, medications, visitDate, attendingDoctor});
            }

            // Set the model for the medicalHistoryTable
            medicalHistoryTable.setModel(model);

            // Close the result set, statement, and connection
            resultSet.close();
            preparedStatement.close();
            connection.close();
        } catch (SQLException e) {
            // Handle any SQL exceptions
            e.printStackTrace();
        }
    }

    public void updateVaccineHistoryTable() {
        // Get the patient ID from the patientIdTxtField
        int patientId = Integer.parseInt(patientIdTxtField.getText());

        String url = "jdbc:mysql://127.0.0.1:3306/database";
        String dbUsername = "root";
        String dbPassword = "admin";

        try {
            // Establish the database connection
            Connection connection = DriverManager.getConnection(url, dbUsername, dbPassword);

            // Query to fetch vaccine history information for the specified patient ID
            String query = "SELECT vaccine_name, vaccination_date, next_due_date, administered_by FROM vaccine_history WHERE patient_id = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(query);
            preparedStatement.setInt(1, patientId);
            ResultSet resultSet = preparedStatement.executeQuery();

            // Create a DefaultTableModel to hold the vaccine history data
            DefaultTableModel model = new DefaultTableModel();
            model.addColumn("Vaccine Name");
            model.addColumn("Vaccination Date");
            model.addColumn("Next Due Date");
            model.addColumn("Administered By");

            // Populate the model with the retrieved data
            while (resultSet.next()) {
                String vaccineName = resultSet.getString("vaccine_name");
                String vaccinationDate = resultSet.getString("vaccination_date");
                String dueDate = resultSet.getString("next_due_date");
                String administeredBy = resultSet.getString("administered_by");

                model.addRow(new Object[]{vaccineName, vaccinationDate, dueDate, administeredBy});
            }

            // Set the model for the vaccineHistoryTable
            vaccinationHistoryTable.setModel(model);

            // Close the result set, statement, and connection
            resultSet.close();
            preparedStatement.close();
            connection.close();
        } catch (SQLException e) {
            // Handle any SQL exceptions
            e.printStackTrace();
        }
    }
    private void updatePatient() {
        // Get the data from the text fields
        int patientId = Integer.parseInt(patientIdTxtField.getText());
        String patientName = patientTxtField.getText();
        int age = Integer.parseInt(ageTxt.getText());
        double weight = Double.parseDouble(weightTxt.getText());
        String type = typeTxtField.getText();
        String color = colorTxtField.getText();
        String breed = breedTxtField.getText();
        String marks = marksTxtField.getText();
        String sex = sexComboBox.getSelectedItem().toString().equalsIgnoreCase("MALE") ? "M" : "F";

        // Database connection details
        String url = "jdbc:mysql://127.0.0.1:3306/database";
        String dbUsername = "root";
        String dbPassword = "admin";

        try {
            // Establish the database connection
            Connection connection = DriverManager.getConnection(url, dbUsername, dbPassword);

            // Prepare the SQL query to update patient information
            String query = "UPDATE patient_information SET patient_name = ?, age = ?, weight = ?, type = ?, color = ?, breed = ?, marks = ?, sex = ? WHERE patient_id = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(query);
            preparedStatement.setString(1, patientName);
            preparedStatement.setInt(2, age);
            preparedStatement.setDouble(3, weight);
            preparedStatement.setString(4, type);
            preparedStatement.setString(5, color);
            preparedStatement.setString(6, breed);
            preparedStatement.setString(7, marks);
            preparedStatement.setString(8, sex);
            preparedStatement.setInt(9, patientId);

            // Execute the update query
            int rowsAffected = preparedStatement.executeUpdate();

            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Patient information updated successfully.");
                clearTextFields();
                diagnosisTxtField.setText("");
                treatmentTxtField.setText("");
                medicationTxtField.setText("");
            } else {
                JOptionPane.showMessageDialog(null, "Failed to update patient information.");
            }

            // Close the database connection
            connection.close();
        } catch (SQLException e) {
            // Handle any SQL exceptions
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }
    }
    
    private void updateOwner() {
        String clientName = nameTxtField.getText();
        String address = addressTxtField.getText();
        String contact = contactTxtField.getText();

        // Database connection details
        String url = "jdbc:mysql://127.0.0.1:3306/database";
        String dbUsername = "root";
        String dbPassword = "admin";
       
        try {
            // Establish the database connection
            Connection connection = DriverManager.getConnection(url, dbUsername, dbPassword);

            // Prepare the SQL query to update client information
            String query = "UPDATE client_information SET address = ?, contact = ? WHERE client_name = ?";
            PreparedStatement preparedStatement = connection.prepareStatement(query);
            preparedStatement.setString(1, address);
            preparedStatement.setString(2, contact);
            preparedStatement.setString(3, clientName);

            // Execute the update query
            int rowsAffected = preparedStatement.executeUpdate();

            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Client information updated successfully.");           
                clearTextFields();
                diagnosisTxtField.setText("");
                treatmentTxtField.setText("");
                medicationTxtField.setText("");
                vaccineNameTxtField.setText("");
                vaccinationDate.setDate(null);
                dueDate.setDate(null);
            } else {
                JOptionPane.showMessageDialog(null, "Failed to update client information.");
            }

            // Close the database connection
            connection.close();
        } catch (SQLException e) {
            // Handle any SQL exceptions
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error: " + e.getMessage());
        }
    }
    
    private void updateVaccine() {
        // Get the text from the text fields
        String vaccineName = vaccineNameTxtField.getText();
        java.util.Date vaccinationDateValue = vaccinationDate.getDate();
        java.util.Date dueDateValue = dueDate.getDate();
        int patientId = Integer.parseInt(patientIdTxtField.getText());

        // Convert the dates to SQL Date format
        java.sql.Date sqlVaccinationDate = new java.sql.Date(vaccinationDateValue.getTime());
        java.sql.Date sqlDueDate = new java.sql.Date(dueDateValue.getTime());

        String url = "jdbc:mysql://127.0.0.1:3306/database";
        String dbUsername = "root";
        String dbPassword = "admin";

        String administeredBy = "";
         JOptionPane.showMessageDialog(null, "Must complete all fields.");
        try {
            // Establish the database connection
            Connection connection = DriverManager.getConnection(url, dbUsername, dbPassword);

            // Query to get the administered_by information
            String userQuery = "SELECT first_name, last_name FROM user_information WHERE userid = ?";
            PreparedStatement userStatement = connection.prepareStatement(userQuery);
            userStatement.setInt(1, realUserId);

            ResultSet userResultSet = userStatement.executeQuery();

            if (userResultSet.next()) {
                String firstName = userResultSet.getString("first_name");
                String lastName = userResultSet.getString("last_name");
                administeredBy = firstName + " " + lastName;
            } else {
                JOptionPane.showMessageDialog(null, "User information not found.");
                return;
            }

            // Query to insert the vaccine information
            String vaccineQuery = "INSERT INTO vaccine_history (patient_id, vaccine_name, vaccination_date, next_due_date, administered_by) VALUES (?, ?, ?, ?, ?)";
            PreparedStatement vaccineStatement = connection.prepareStatement(vaccineQuery);
            vaccineStatement.setInt(1, patientId);
            vaccineStatement.setString(2, vaccineName);
            vaccineStatement.setDate(3, sqlVaccinationDate);
            vaccineStatement.setDate(4, sqlDueDate);
            vaccineStatement.setString(5, administeredBy);

            int rowsAffected = vaccineStatement.executeUpdate();

            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(null, "Vaccine information updated successfully.");
                clearTextFields();
                vaccineNameTxtField.setText("");
                vaccinationDate.setDate(null);
                dueDate.setDate(null);
                
            } else {
                JOptionPane.showMessageDialog(null, "Failed to update vaccine information.");
            }

            // Close the statements and the connection
            userStatement.close();
            vaccineStatement.close();
            connection.close();
        } catch (SQLException e) {
            // Handle any SQL exceptions
            JOptionPane.showMessageDialog(null, "Must complete all fields.");
            e.printStackTrace();
        }
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private swing.TextField addressTxtField;
    private swing.TextField ageTxt;
    private swing.TextField breedTxtField;
    private swing.TextField colorTxtField;
    private swing.TextField contactTxtField;
    private swing.TextField diagnosisTxtField;
    private com.toedter.calendar.JDateChooser dueDate;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private swing.TextField marksTxtField;
    private javax.swing.JTable medicalHistoryTable;
    private swing.TextField medicationTxtField;
    private swing.TextField nameTxtField;
    private swing.TextField patientIdTxtField;
    private swing.TextField patientTxtField;
    private swing.Combobox sexComboBox;
    private javax.swing.JScrollPane sp;
    private swing.TextField treatmentTxtField;
    private swing.TextField typeTxtField;
    private javax.swing.JToggleButton updateMedicalBtn;
    private javax.swing.JToggleButton updateOwnerBtn;
    private javax.swing.JToggleButton updatePatientBtn;
    private javax.swing.JToggleButton updateVaccineBtn;
    private com.toedter.calendar.JDateChooser vaccinationDate;
    private javax.swing.JTable vaccinationHistoryTable;
    private swing.TextField vaccineNameTxtField;
    private swing.TextField weightTxt;
    // End of variables declaration//GEN-END:variables
}

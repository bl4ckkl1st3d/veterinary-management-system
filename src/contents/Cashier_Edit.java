package contents;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.LayoutManager;
import java.awt.RenderingHints;
import java.math.BigDecimal;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import java.sql.*;  
import java.util.Date;
import swing.ScrollBar;

/**
 *
 * @author Richard Reynald
 */
public class Cashier_Edit extends javax.swing.JPanel {

    /**
     * Creates new form Cashier_Edit
     */
    public Cashier_Edit() {
        initComponents();
        sp.setHorizontalScrollBar(new ScrollBar());
        sp.setVerticalScrollBar(new ScrollBar());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sp = new javax.swing.JScrollPane();
        jPanel5 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jDateChooserExpirationDate = new com.toedter.calendar.JDateChooser();
        rbtnPerishableNo = new javax.swing.JRadioButton();
        rbtnPerishableYes = new javax.swing.JRadioButton();
        jLabel13 = new javax.swing.JLabel();
        searchProduct = new javax.swing.JButton();
        txtBarcode = new swing.TextField();
        txtName = new swing.TextField();
        txtPrice = new swing.TextField();
        txtStocks = new swing.TextField();
        txtCriticalLevel = new swing.TextField();
        cmbCategory = new swing.Combobox();
        txtSupplierAddress = new swing.TextField();
        txtSupplierContact = new swing.TextField();
        jLabel17 = new javax.swing.JLabel();
        txtSupplierName = new swing.TextField();
        jLabel18 = new javax.swing.JLabel();
        editBtn = new javax.swing.JButton();

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        rbtnPerishableNo.setText("No");
        rbtnPerishableNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnPerishableNoActionPerformed(evt);
            }
        });

        rbtnPerishableYes.setText("Yes");
        rbtnPerishableYes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtnPerishableYesActionPerformed(evt);
            }
        });

        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        jLabel13.setText("Exp Date");

        searchProduct.setText("SEARCH");
        searchProduct.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchProductActionPerformed(evt);
            }
        });

        txtBarcode.setLabelText("Barcode");

        txtName.setLabelText("Name");

        txtPrice.setLabelText("Price");

        txtStocks.setLabelText("Stocks");

        txtCriticalLevel.setLabelText("Critical Level");

        cmbCategory.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Food", "Vitamin", "Medicine", "Vaccine", "Grooming", "Accessory", "Toy" }));
        cmbCategory.setSelectedIndex(-1);
        cmbCategory.setLabelText("Category");

        txtSupplierAddress.setLabelText("Supplier Address");

        txtSupplierContact.setLabelText("Supplier Contact");

        jLabel17.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel17.setText("Perishable");

        txtSupplierName.setLabelText("Supplier");

        jLabel18.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel18.setText("EDIT PRODUCT");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(80, 80, 80)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(txtStocks, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(txtCriticalLevel, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(173, 173, 173))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtSupplierContact, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSupplierAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSupplierName, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel18)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtBarcode, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                                    .addComponent(txtName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtPrice, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(searchProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel17)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbtnPerishableYes, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rbtnPerishableNo, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 76, Short.MAX_VALUE)
                        .addComponent(jLabel13)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jDateChooserExpirationDate, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(127, 127, 127))))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jDateChooserExpirationDate, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jLabel18)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtBarcode, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchProduct, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(25, 25, 25)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtStocks, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtCriticalLevel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(25, 25, 25)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbtnPerishableYes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rbtnPerishableNo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addComponent(cmbCategory, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtSupplierName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtSupplierAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(txtSupplierContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        editBtn.setText("EDIT PRODUCT");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(82, 82, 82)
                .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 472, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 379, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        sp.setViewportView(jPanel5);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sp, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(sp, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    private void editProdToDB() {
    // Get the information from the text fields and other components
    String barcode = txtBarcode.getText().trim();
    String name = txtName.getText().trim();
    String priceStr = txtPrice.getText().trim();
    String stocksStr = txtStocks.getText().trim();
    String criticalLevelStr = txtCriticalLevel.getText().trim();
    boolean perishable = rbtnPerishableYes.isSelected();
    java.sql.Date expirationDate = perishable ? new java.sql.Date(jDateChooserExpirationDate.getDate().getTime()) : null;
    String supplierName = txtSupplierName.getText().trim();
    String category = (String) cmbCategory.getSelectedItem(); // Assuming you have a JComboBox for category
    String supplierAddress = txtSupplierAddress.getText().trim();
    String supplierContact = txtSupplierContact.getText().trim();
    
    // Validate barcode
    if (barcode.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Barcode cannot be empty.");
        return;
    }
    
    // Validate name
    if (name.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter a product name.");
        return;
    }
    
    // Validate price
    BigDecimal price;
    try {
        price = new BigDecimal(priceStr);
        if (price.compareTo(BigDecimal.ZERO) <= 0) {
            JOptionPane.showMessageDialog(this, "Price must be a positive number.");
            return;
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid price format.");
        return;
    }
    
    // Validate stocks
    int stocks;
    try {
        stocks = Integer.parseInt(stocksStr);
        if (stocks <= 0) {
            JOptionPane.showMessageDialog(this, "Stocks must be a positive number.");
            return;
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid stocks format.");
        return;
    }
    
    // Validate critical level
    int criticalLevel;
    try {
        criticalLevel = Integer.parseInt(criticalLevelStr);
        if (criticalLevel <= 0) {
            JOptionPane.showMessageDialog(this, "Critical level must be a positive number.");
            return;
        }
        if (criticalLevel > stocks) {
            JOptionPane.showMessageDialog(this, "Critical level cannot be greater than stocks.");
            return;
        }
    } catch (NumberFormatException e) {
        JOptionPane.showMessageDialog(this, "Invalid critical level format.");
        return;
    }
    
    // Validate perishable
    if (!rbtnPerishableYes.isSelected() && !rbtnPerishableNo.isSelected()) {
        JOptionPane.showMessageDialog(this, "Please select if the product is perishable.");
        return;
    }
    
    // Validate expiration date
    if (perishable && expirationDate != null) {
        Date today = new Date();
        if (expirationDate.before(today)) {
            JOptionPane.showMessageDialog(this, "Expiration date cannot be a past date.");
            return;
        }
    }
    
    // Validate supplier name
    if (supplierName.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter supplier name.");
        return;
    }
    
    // Database connection details
    String url = "jdbc:mysql://127.0.0.1:3306/database";
    String dbUsername = "root";
    String dbPassword = "admin";
    
    Connection conn = null;
    PreparedStatement pstmtProduct = null;
    PreparedStatement pstmtSupplier = null;
    ResultSet rsSupplier = null;
    
    try {
        // Establish a connection to the database
        conn = DriverManager.getConnection(url, dbUsername, dbPassword);
        
        // Begin transaction
        conn.setAutoCommit(false);
        
        // 1. Update product_information table
        String updateProductSql = "UPDATE product_information SET name = ?, price = ?, stocks = ?, critical_level = ?, perishable = ?, expiration_date = ?, supplier_name = ?, category = ? WHERE barcode = ?";
        
        pstmtProduct = conn.prepareStatement(updateProductSql);
        pstmtProduct.setString(1, name);
        pstmtProduct.setBigDecimal(2, price);
        pstmtProduct.setInt(3, stocks);
        pstmtProduct.setInt(4, criticalLevel);
        pstmtProduct.setBoolean(5, perishable);
        if (perishable) {
            pstmtProduct.setDate(6, expirationDate);
        } else {
            pstmtProduct.setNull(6, java.sql.Types.DATE);
        }
        pstmtProduct.setString(7, supplierName);
        pstmtProduct.setString(8, category);
        pstmtProduct.setString(9, barcode);
        
        // Execute update for product_information
        int rowsAffectedProduct = pstmtProduct.executeUpdate();
        
        if (rowsAffectedProduct <= 0) {
            throw new SQLException("Failed to update product information.");
        }
        
        // 2. Update suppliers table (if necessary)
        String selectSupplierSql = "SELECT supplier_id FROM suppliers WHERE supplier_name = ?";
        pstmtSupplier = conn.prepareStatement(selectSupplierSql);
        pstmtSupplier.setString(1, supplierName);
        
        rsSupplier = pstmtSupplier.executeQuery();
        int supplierId;
        if (rsSupplier.next()) {
            supplierId = rsSupplier.getInt("supplier_id");
        } else {
            // Insert new supplier if not exists
            String insertSupplierSql = "INSERT INTO suppliers (supplier_name, supplier_address, supplier_contact) VALUES (?, ?, ?)";
            pstmtSupplier = conn.prepareStatement(insertSupplierSql, Statement.RETURN_GENERATED_KEYS);
            pstmtSupplier.setString(1, supplierName);
            pstmtSupplier.setString(2, supplierAddress);
            pstmtSupplier.setString(3, supplierContact);
            
            int rowsAffectedSupplier = pstmtSupplier.executeUpdate();
            if (rowsAffectedSupplier <= 0) {
                throw new SQLException("Failed to insert new supplier.");
            }
            
            // Retrieve generated supplier ID
            ResultSet generatedKeys = pstmtSupplier.getGeneratedKeys();
            if (generatedKeys.next()) {
                supplierId = generatedKeys.getInt(1);
            } else {
                throw new SQLException("Failed to retrieve new supplier ID.");
            }
        }
        
        // Commit transaction
        conn.commit();
        
        JOptionPane.showMessageDialog(this, "Product information updated successfully.");
        
    } catch (SQLException e) {
        try {
            if (conn != null) {
                conn.rollback(); // Rollback in case of error
            }
        } catch (SQLException rollbackEx) {
            rollbackEx.printStackTrace();
        }
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
    } finally {
        try {
            if (pstmtProduct != null) pstmtProduct.close();
            if (pstmtSupplier != null) pstmtSupplier.close();
            if (rsSupplier != null) rsSupplier.close();
            if (conn != null) {
                conn.setAutoCommit(true); // Reset auto-commit mode
                conn.close();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
}
    
    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        editProdToDB();
    }//GEN-LAST:event_editBtnActionPerformed

    private void rbtnPerishableNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnPerishableNoActionPerformed
        rbtnPerishableYes.setSelected(false);
        rbtnPerishableNo.setSelected(true);
    }//GEN-LAST:event_rbtnPerishableNoActionPerformed

    private void rbtnPerishableYesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtnPerishableYesActionPerformed
        rbtnPerishableYes.setSelected(true);
        rbtnPerishableNo.setSelected(false);
    }//GEN-LAST:event_rbtnPerishableYesActionPerformed

    private void searchProductActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchProductActionPerformed
        // Get the barcode from the text field
        String barcode = txtBarcode.getText().trim();

        // Database connection details
        String url = "jdbc:mysql://127.0.0.1:3306/database";
        String dbUsername = "root";
        String dbPassword = "admin";

        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;

        try {
            // Establish a connection to the database
            conn = DriverManager.getConnection(url, dbUsername, dbPassword);

            // SQL query to retrieve product information
            String sql = "SELECT * FROM product_information WHERE barcode = ?";

            // Prepare the statement
            pstmt = conn.prepareStatement(sql);
            pstmt.setString(1, barcode);

            // Execute the query
            rs = pstmt.executeQuery();

            // Check if product exists
            if (rs.next()) {
                // Product details found, retrieve values
                String name = rs.getString("name");
                BigDecimal price = rs.getBigDecimal("price");
                int stocks = rs.getInt("stocks");
                int criticalLevel = rs.getInt("critical_level");
                boolean perishable = rs.getBoolean("perishable");
                Date expirationDate = rs.getDate("expiration_date");
                String supplierName = rs.getString("supplier_name");
                String category = rs.getString("category");

                // Display values in corresponding text fields or other components
                txtName.setText(name);
                txtPrice.setText(price.toString());
                txtStocks.setText(String.valueOf(stocks));
                txtCriticalLevel.setText(String.valueOf(criticalLevel));
                if (perishable) {
                    rbtnPerishableYes.setSelected(true);
                    jDateChooserExpirationDate.setDate(expirationDate);
                } else {
                    rbtnPerishableNo.setSelected(true);
                    jDateChooserExpirationDate.setDate(null);
                }
                txtSupplierName.setText(supplierName);
                cmbCategory.setSelectedItem(category);

                // Inform user that product information is retrieved
                JOptionPane.showMessageDialog(this, "Product found.");
            } else {
                // Product does not exist
                JOptionPane.showMessageDialog(this, "Product not found.");
            }

        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
        } finally {
            try {
                if (rs != null) rs.close();
                if (pstmt != null) pstmt.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
    }//GEN-LAST:event_searchProductActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private swing.Combobox cmbCategory;
    private javax.swing.JButton editBtn;
    private com.toedter.calendar.JDateChooser jDateChooserExpirationDate;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JRadioButton rbtnPerishableNo;
    private javax.swing.JRadioButton rbtnPerishableYes;
    private javax.swing.JButton searchProduct;
    private javax.swing.JScrollPane sp;
    private swing.TextField txtBarcode;
    private swing.TextField txtCriticalLevel;
    private swing.TextField txtName;
    private swing.TextField txtPrice;
    private swing.TextField txtStocks;
    private swing.TextField txtSupplierAddress;
    private swing.TextField txtSupplierContact;
    private swing.TextField txtSupplierName;
    // End of variables declaration//GEN-END:variables
}
